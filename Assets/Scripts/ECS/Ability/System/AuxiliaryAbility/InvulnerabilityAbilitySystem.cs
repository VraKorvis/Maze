using Unity.Collections;
using Unity.Entities;
using Unity.Jobs;
using UnityEngine;

[UpdateInGroup(typeof(AbilitySystemGroup))]
[UpdateAfter(typeof(CastInvulnerabilityButtonAbilitySystem))]
public class InvulnerabilityAbilitySystem : SystemBase {
    private EntityQuery m_abilityQuery;
    private EndSimulationEntityCommandBufferSystem m_EndSimulationEntityCommandBuffer;

    protected override void OnCreate() {
        m_abilityQuery = GetEntityQuery(new EntityQueryDesc() {
            All = new[] {
                ComponentType.ReadOnly<PlayerData>(),
                ComponentType.ReadOnly<Invulnerability>(),
            },
            Options = EntityQueryOptions.FilterWriteGroup
        });
        m_EndSimulationEntityCommandBuffer = World.DefaultGameObjectInjectionWorld
            .GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>();
        RequireForUpdate(m_abilityQuery);
    }

//    [RequireComponentTag(typeof(PlayerData))]
//    private struct InvulnerabilityBuffJob : IJobForEachWithEntity<Invulnerability> {
//        [ReadOnly] public float dt;
//
//        public EntityCommandBuffer.Concurrent CommandBuffer;
//
//        public void Execute(Entity entity, int index, ref Invulnerability buff) {
//            buff.duration -= dt;
//            if (buff.duration < 0) {
//                CommandBuffer.RemoveComponent<Invulnerability>(index, entity);
//            }
//        }
//    }


    protected override void OnUpdate() {
//        var invulnerabilityBuffJob = new InvulnerabilityBuffJob() {
//            dt = Time.DeltaTime,
//            CommandBuffer = m_EndSimulationEntityCommandBuffer.CreateCommandBuffer().ToConcurrent(),
//        }.Schedule();

        var dt = Time.DeltaTime;
        var ecb = m_EndSimulationEntityCommandBuffer.CreateCommandBuffer();
        var invulnerabilityBuffJobHandle =
            Entities.WithName("InvulnerabilityBuffJobHandle")
                .WithAll<PlayerData>()
                .WithBurst()
                .ForEach((Entity e, ref Invulnerability buff) => {
                    buff.duration -= dt;
                    if (buff.duration < 0) {
                        ecb.RemoveComponent<Invulnerability>(e);
                    }
                }).Schedule(Dependency);
        m_EndSimulationEntityCommandBuffer.AddJobHandleForProducer(invulnerabilityBuffJobHandle);
        Dependency = invulnerabilityBuffJobHandle;
    }
}

[UpdateInGroup(typeof(AbilitySystemGroup))]
public class CastInvulnerabilityButtonAbilitySystem : ComponentSystem {
    private EntityQuery castInvulnerabilityGroup;
    private EntityQuery playerQuery;

    protected override void OnCreate() {
        castInvulnerabilityGroup = GetEntityQuery(new EntityQueryDesc() {
            All = new[] {
                ComponentType.ReadOnly<Invulnerability>(),
                ComponentType.ReadOnly<AuxiliaryAbility>(),
                ComponentType.ReadOnly<ActivateAbilityTag>(),
            },
            Options = EntityQueryOptions.FilterWriteGroup
        });
        RequireForUpdate(castInvulnerabilityGroup);
        playerQuery = GetEntityQuery(ComponentType.ReadOnly<PlayerData>());
        RequireForUpdate(playerQuery);
    }

    protected override void OnUpdate() {
        var em = World.DefaultGameObjectInjectionWorld.EntityManager;
        var invulnerabilityEntity = castInvulnerabilityGroup.GetSingletonEntity();
        var invulnerability = em.GetComponentData<Invulnerability>(invulnerabilityEntity);

        var player = playerQuery.GetSingletonEntity();
        em.AddComponentData(player, invulnerability);
        em.RemoveComponent<ActivateAbilityTag>(invulnerabilityEntity);
    }
}